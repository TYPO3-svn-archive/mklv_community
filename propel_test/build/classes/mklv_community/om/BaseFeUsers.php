<?php

require_once 'propel/om/BaseObject.php';

require_once 'propel/om/Persistent.php';

include_once 'creole/util/Clob.php';
include_once 'creole/util/Blob.php';


include_once 'propel/util/Criteria.php';

include_once 'mklv_community/FeUsersPeer.php';

/**
 * Base class that represents a row from the 'fe_users' table.
 *
 * 
 *
 * This class was autogenerated by Propel on:
 *
 * Sun Dec  2 12:29:19 2007
 *
 * @package    mklv_community.om
 */
abstract class BaseFeUsers extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        FeUsersPeer
	 */
	protected static $peer;


	/**
	 * The value for the uid field.
	 * @var        int
	 */
	protected $uid;


	/**
	 * The value for the pid field.
	 * @var        int
	 */
	protected $pid;


	/**
	 * The value for the tstamp field.
	 * @var        int
	 */
	protected $tstamp;


	/**
	 * The value for the username field.
	 * @var        string
	 */
	protected $username;


	/**
	 * The value for the password field.
	 * @var        string
	 */
	protected $password;


	/**
	 * The value for the usergroup field.
	 * @var        string
	 */
	protected $usergroup;


	/**
	 * The value for the disable field.
	 * @var        int
	 */
	protected $disable;


	/**
	 * The value for the starttime field.
	 * @var        int
	 */
	protected $starttime;


	/**
	 * The value for the endtime field.
	 * @var        int
	 */
	protected $endtime;


	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;


	/**
	 * The value for the address field.
	 * @var        string
	 */
	protected $address;


	/**
	 * The value for the telephone field.
	 * @var        string
	 */
	protected $telephone;


	/**
	 * The value for the fax field.
	 * @var        string
	 */
	protected $fax;


	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;


	/**
	 * The value for the crdate field.
	 * @var        int
	 */
	protected $crdate;


	/**
	 * The value for the cruser_id field.
	 * @var        int
	 */
	protected $cruser_id;


	/**
	 * The value for the locktodomain field.
	 * @var        string
	 */
	protected $locktodomain;


	/**
	 * The value for the deleted field.
	 * @var        int
	 */
	protected $deleted;


	/**
	 * The value for the uc field.
	 * @var        string
	 */
	protected $uc;


	/**
	 * The value for the title field.
	 * @var        string
	 */
	protected $title;


	/**
	 * The value for the zip field.
	 * @var        string
	 */
	protected $zip;


	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;


	/**
	 * The value for the country field.
	 * @var        string
	 */
	protected $country;


	/**
	 * The value for the www field.
	 * @var        string
	 */
	protected $www;


	/**
	 * The value for the company field.
	 * @var        string
	 */
	protected $company;


	/**
	 * The value for the image field.
	 * @var        string
	 */
	protected $image;


	/**
	 * The value for the tsconfig field.
	 * @var        string
	 */
	protected $tsconfig;


	/**
	 * The value for the fe_cruser_id field.
	 * @var        int
	 */
	protected $fe_cruser_id;


	/**
	 * The value for the lastlogin field.
	 * @var        int
	 */
	protected $lastlogin;


	/**
	 * The value for the is_online field.
	 * @var        int
	 */
	protected $is_online;


	/**
	 * The value for the tx_mklvcommunity_icq field.
	 * @var        string
	 */
	protected $tx_mklvcommunity_icq;


	/**
	 * The value for the tx_mklvcommunity_privacy_flag field.
	 * @var        int
	 */
	protected $tx_mklvcommunity_privacy_flag;


	/**
	 * The value for the tx_mklvcommunity_buddy_confirm field.
	 * @var        int
	 */
	protected $tx_mklvcommunity_buddy_confirm;

	/**
	 * Collection to store aggregation of collTxMklvcommunityUnconfirmedBuddysRelatedByUserUid.
	 * @var        array
	 */
	protected $collTxMklvcommunityUnconfirmedBuddysRelatedByUserUid;

	/**
	 * The criteria used to select the current contents of collTxMklvcommunityUnconfirmedBuddysRelatedByUserUid.
	 * @var        Criteria
	 */
	protected $lastTxMklvcommunityUnconfirmedBuddyRelatedByUserUidCriteria = null;

	/**
	 * Collection to store aggregation of collTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid.
	 * @var        array
	 */
	protected $collTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid;

	/**
	 * The criteria used to select the current contents of collTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid.
	 * @var        Criteria
	 */
	protected $lastTxMklvcommunityUnconfirmedBuddyRelatedByBuddyUidCriteria = null;

	/**
	 * Collection to store aggregation of collTxMklvcommunityBuddysRelatedByUserUid.
	 * @var        array
	 */
	protected $collTxMklvcommunityBuddysRelatedByUserUid;

	/**
	 * The criteria used to select the current contents of collTxMklvcommunityBuddysRelatedByUserUid.
	 * @var        Criteria
	 */
	protected $lastTxMklvcommunityBuddyRelatedByUserUidCriteria = null;

	/**
	 * Collection to store aggregation of collTxMklvcommunityBuddysRelatedByBuddyUid.
	 * @var        array
	 */
	protected $collTxMklvcommunityBuddysRelatedByBuddyUid;

	/**
	 * The criteria used to select the current contents of collTxMklvcommunityBuddysRelatedByBuddyUid.
	 * @var        Criteria
	 */
	protected $lastTxMklvcommunityBuddyRelatedByBuddyUidCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [uid] column value.
	 * 
	 * @return     int
	 */
	public function getUid()
	{

		return $this->uid;
	}

	/**
	 * Get the [pid] column value.
	 * 
	 * @return     int
	 */
	public function getPid()
	{

		return $this->pid;
	}

	/**
	 * Get the [tstamp] column value.
	 * 
	 * @return     int
	 */
	public function getTstamp()
	{

		return $this->tstamp;
	}

	/**
	 * Get the [username] column value.
	 * 
	 * @return     string
	 */
	public function getUsername()
	{

		return $this->username;
	}

	/**
	 * Get the [password] column value.
	 * 
	 * @return     string
	 */
	public function getPassword()
	{

		return $this->password;
	}

	/**
	 * Get the [usergroup] column value.
	 * 
	 * @return     string
	 */
	public function getUsergroup()
	{

		return $this->usergroup;
	}

	/**
	 * Get the [disable] column value.
	 * 
	 * @return     int
	 */
	public function getDisable()
	{

		return $this->disable;
	}

	/**
	 * Get the [starttime] column value.
	 * 
	 * @return     int
	 */
	public function getStarttime()
	{

		return $this->starttime;
	}

	/**
	 * Get the [endtime] column value.
	 * 
	 * @return     int
	 */
	public function getEndtime()
	{

		return $this->endtime;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{

		return $this->name;
	}

	/**
	 * Get the [address] column value.
	 * 
	 * @return     string
	 */
	public function getAddress()
	{

		return $this->address;
	}

	/**
	 * Get the [telephone] column value.
	 * 
	 * @return     string
	 */
	public function getTelephone()
	{

		return $this->telephone;
	}

	/**
	 * Get the [fax] column value.
	 * 
	 * @return     string
	 */
	public function getFax()
	{

		return $this->fax;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{

		return $this->email;
	}

	/**
	 * Get the [crdate] column value.
	 * 
	 * @return     int
	 */
	public function getCrdate()
	{

		return $this->crdate;
	}

	/**
	 * Get the [cruser_id] column value.
	 * 
	 * @return     int
	 */
	public function getCruserId()
	{

		return $this->cruser_id;
	}

	/**
	 * Get the [locktodomain] column value.
	 * 
	 * @return     string
	 */
	public function getLocktodomain()
	{

		return $this->locktodomain;
	}

	/**
	 * Get the [deleted] column value.
	 * 
	 * @return     int
	 */
	public function getDeleted()
	{

		return $this->deleted;
	}

	/**
	 * Get the [uc] column value.
	 * 
	 * @return     string
	 */
	public function getUc()
	{

		return $this->uc;
	}

	/**
	 * Get the [title] column value.
	 * 
	 * @return     string
	 */
	public function getTitle()
	{

		return $this->title;
	}

	/**
	 * Get the [zip] column value.
	 * 
	 * @return     string
	 */
	public function getZip()
	{

		return $this->zip;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{

		return $this->city;
	}

	/**
	 * Get the [country] column value.
	 * 
	 * @return     string
	 */
	public function getCountry()
	{

		return $this->country;
	}

	/**
	 * Get the [www] column value.
	 * 
	 * @return     string
	 */
	public function getWww()
	{

		return $this->www;
	}

	/**
	 * Get the [company] column value.
	 * 
	 * @return     string
	 */
	public function getCompany()
	{

		return $this->company;
	}

	/**
	 * Get the [image] column value.
	 * 
	 * @return     string
	 */
	public function getImage()
	{

		return $this->image;
	}

	/**
	 * Get the [tsconfig] column value.
	 * 
	 * @return     string
	 */
	public function getTsconfig()
	{

		return $this->tsconfig;
	}

	/**
	 * Get the [fe_cruser_id] column value.
	 * 
	 * @return     int
	 */
	public function getFeCruserId()
	{

		return $this->fe_cruser_id;
	}

	/**
	 * Get the [lastlogin] column value.
	 * 
	 * @return     int
	 */
	public function getLastlogin()
	{

		return $this->lastlogin;
	}

	/**
	 * Get the [is_online] column value.
	 * 
	 * @return     int
	 */
	public function getIsOnline()
	{

		return $this->is_online;
	}

	/**
	 * Get the [tx_mklvcommunity_icq] column value.
	 * 
	 * @return     string
	 */
	public function getTxMklvcommunityIcq()
	{

		return $this->tx_mklvcommunity_icq;
	}

	/**
	 * Get the [tx_mklvcommunity_privacy_flag] column value.
	 * 
	 * @return     int
	 */
	public function getTxMklvcommunityPrivacyFlag()
	{

		return $this->tx_mklvcommunity_privacy_flag;
	}

	/**
	 * Get the [tx_mklvcommunity_buddy_confirm] column value.
	 * 
	 * @return     int
	 */
	public function getTxMklvcommunityBuddyConfirm()
	{

		return $this->tx_mklvcommunity_buddy_confirm;
	}

	/**
	 * Set the value of [uid] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setUid($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->uid !== $v) {
			$this->uid = $v;
			$this->modifiedColumns[] = FeUsersPeer::UID;
		}

	} // setUid()

	/**
	 * Set the value of [pid] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setPid($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->pid !== $v) {
			$this->pid = $v;
			$this->modifiedColumns[] = FeUsersPeer::PID;
		}

	} // setPid()

	/**
	 * Set the value of [tstamp] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setTstamp($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->tstamp !== $v) {
			$this->tstamp = $v;
			$this->modifiedColumns[] = FeUsersPeer::TSTAMP;
		}

	} // setTstamp()

	/**
	 * Set the value of [username] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setUsername($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->username !== $v) {
			$this->username = $v;
			$this->modifiedColumns[] = FeUsersPeer::USERNAME;
		}

	} // setUsername()

	/**
	 * Set the value of [password] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setPassword($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->password !== $v) {
			$this->password = $v;
			$this->modifiedColumns[] = FeUsersPeer::PASSWORD;
		}

	} // setPassword()

	/**
	 * Set the value of [usergroup] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setUsergroup($v)
	{

		// if the passed in parameter is the *same* object that
		// is stored internally then we use the Lob->isModified()
		// method to know whether contents changed.
		if ($v instanceof Lob && $v === $this->usergroup) {
			$changed = $v->isModified();
		} else {
			$changed = ($this->usergroup !== $v);
		}
		if ($changed) {
			if ( !($v instanceof Lob) ) {
				$obj = new Blob();
				$obj->setContents($v);
			} else {
				$obj = $v;
			}
			$this->usergroup = $obj;
			$this->modifiedColumns[] = FeUsersPeer::USERGROUP;
		}

	} // setUsergroup()

	/**
	 * Set the value of [disable] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setDisable($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->disable !== $v) {
			$this->disable = $v;
			$this->modifiedColumns[] = FeUsersPeer::DISABLE;
		}

	} // setDisable()

	/**
	 * Set the value of [starttime] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setStarttime($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->starttime !== $v) {
			$this->starttime = $v;
			$this->modifiedColumns[] = FeUsersPeer::STARTTIME;
		}

	} // setStarttime()

	/**
	 * Set the value of [endtime] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setEndtime($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->endtime !== $v) {
			$this->endtime = $v;
			$this->modifiedColumns[] = FeUsersPeer::ENDTIME;
		}

	} // setEndtime()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setName($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = FeUsersPeer::NAME;
		}

	} // setName()

	/**
	 * Set the value of [address] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setAddress($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->address !== $v) {
			$this->address = $v;
			$this->modifiedColumns[] = FeUsersPeer::ADDRESS;
		}

	} // setAddress()

	/**
	 * Set the value of [telephone] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setTelephone($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->telephone !== $v) {
			$this->telephone = $v;
			$this->modifiedColumns[] = FeUsersPeer::TELEPHONE;
		}

	} // setTelephone()

	/**
	 * Set the value of [fax] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setFax($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->fax !== $v) {
			$this->fax = $v;
			$this->modifiedColumns[] = FeUsersPeer::FAX;
		}

	} // setFax()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setEmail($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = FeUsersPeer::EMAIL;
		}

	} // setEmail()

	/**
	 * Set the value of [crdate] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setCrdate($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->crdate !== $v) {
			$this->crdate = $v;
			$this->modifiedColumns[] = FeUsersPeer::CRDATE;
		}

	} // setCrdate()

	/**
	 * Set the value of [cruser_id] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setCruserId($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->cruser_id !== $v) {
			$this->cruser_id = $v;
			$this->modifiedColumns[] = FeUsersPeer::CRUSER_ID;
		}

	} // setCruserId()

	/**
	 * Set the value of [locktodomain] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setLocktodomain($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->locktodomain !== $v) {
			$this->locktodomain = $v;
			$this->modifiedColumns[] = FeUsersPeer::LOCKTODOMAIN;
		}

	} // setLocktodomain()

	/**
	 * Set the value of [deleted] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setDeleted($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->deleted !== $v) {
			$this->deleted = $v;
			$this->modifiedColumns[] = FeUsersPeer::DELETED;
		}

	} // setDeleted()

	/**
	 * Set the value of [uc] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setUc($v)
	{

		// if the passed in parameter is the *same* object that
		// is stored internally then we use the Lob->isModified()
		// method to know whether contents changed.
		if ($v instanceof Lob && $v === $this->uc) {
			$changed = $v->isModified();
		} else {
			$changed = ($this->uc !== $v);
		}
		if ($changed) {
			if ( !($v instanceof Lob) ) {
				$obj = new Blob();
				$obj->setContents($v);
			} else {
				$obj = $v;
			}
			$this->uc = $obj;
			$this->modifiedColumns[] = FeUsersPeer::UC;
		}

	} // setUc()

	/**
	 * Set the value of [title] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setTitle($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->title !== $v) {
			$this->title = $v;
			$this->modifiedColumns[] = FeUsersPeer::TITLE;
		}

	} // setTitle()

	/**
	 * Set the value of [zip] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setZip($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->zip !== $v) {
			$this->zip = $v;
			$this->modifiedColumns[] = FeUsersPeer::ZIP;
		}

	} // setZip()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setCity($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = FeUsersPeer::CITY;
		}

	} // setCity()

	/**
	 * Set the value of [country] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setCountry($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->country !== $v) {
			$this->country = $v;
			$this->modifiedColumns[] = FeUsersPeer::COUNTRY;
		}

	} // setCountry()

	/**
	 * Set the value of [www] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setWww($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->www !== $v) {
			$this->www = $v;
			$this->modifiedColumns[] = FeUsersPeer::WWW;
		}

	} // setWww()

	/**
	 * Set the value of [company] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setCompany($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->company !== $v) {
			$this->company = $v;
			$this->modifiedColumns[] = FeUsersPeer::COMPANY;
		}

	} // setCompany()

	/**
	 * Set the value of [image] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setImage($v)
	{

		// if the passed in parameter is the *same* object that
		// is stored internally then we use the Lob->isModified()
		// method to know whether contents changed.
		if ($v instanceof Lob && $v === $this->image) {
			$changed = $v->isModified();
		} else {
			$changed = ($this->image !== $v);
		}
		if ($changed) {
			if ( !($v instanceof Lob) ) {
				$obj = new Blob();
				$obj->setContents($v);
			} else {
				$obj = $v;
			}
			$this->image = $obj;
			$this->modifiedColumns[] = FeUsersPeer::IMAGE;
		}

	} // setImage()

	/**
	 * Set the value of [tsconfig] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setTsconfig($v)
	{

		// if the passed in parameter is the *same* object that
		// is stored internally then we use the Lob->isModified()
		// method to know whether contents changed.
		if ($v instanceof Lob && $v === $this->tsconfig) {
			$changed = $v->isModified();
		} else {
			$changed = ($this->tsconfig !== $v);
		}
		if ($changed) {
			if ( !($v instanceof Lob) ) {
				$obj = new Blob();
				$obj->setContents($v);
			} else {
				$obj = $v;
			}
			$this->tsconfig = $obj;
			$this->modifiedColumns[] = FeUsersPeer::TSCONFIG;
		}

	} // setTsconfig()

	/**
	 * Set the value of [fe_cruser_id] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setFeCruserId($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->fe_cruser_id !== $v) {
			$this->fe_cruser_id = $v;
			$this->modifiedColumns[] = FeUsersPeer::FE_CRUSER_ID;
		}

	} // setFeCruserId()

	/**
	 * Set the value of [lastlogin] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setLastlogin($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->lastlogin !== $v) {
			$this->lastlogin = $v;
			$this->modifiedColumns[] = FeUsersPeer::LASTLOGIN;
		}

	} // setLastlogin()

	/**
	 * Set the value of [is_online] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setIsOnline($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->is_online !== $v) {
			$this->is_online = $v;
			$this->modifiedColumns[] = FeUsersPeer::IS_ONLINE;
		}

	} // setIsOnline()

	/**
	 * Set the value of [tx_mklvcommunity_icq] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setTxMklvcommunityIcq($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->tx_mklvcommunity_icq !== $v) {
			$this->tx_mklvcommunity_icq = $v;
			$this->modifiedColumns[] = FeUsersPeer::TX_MKLVCOMMUNITY_ICQ;
		}

	} // setTxMklvcommunityIcq()

	/**
	 * Set the value of [tx_mklvcommunity_privacy_flag] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setTxMklvcommunityPrivacyFlag($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->tx_mklvcommunity_privacy_flag !== $v) {
			$this->tx_mklvcommunity_privacy_flag = $v;
			$this->modifiedColumns[] = FeUsersPeer::TX_MKLVCOMMUNITY_PRIVACY_FLAG;
		}

	} // setTxMklvcommunityPrivacyFlag()

	/**
	 * Set the value of [tx_mklvcommunity_buddy_confirm] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setTxMklvcommunityBuddyConfirm($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->tx_mklvcommunity_buddy_confirm !== $v) {
			$this->tx_mklvcommunity_buddy_confirm = $v;
			$this->modifiedColumns[] = FeUsersPeer::TX_MKLVCOMMUNITY_BUDDY_CONFIRM;
		}

	} // setTxMklvcommunityBuddyConfirm()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (1-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      ResultSet $rs The ResultSet class with cursor advanced to desired record pos.
	 * @param      int $startcol 1-based offset column which indicates which restultset column to start with.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate(ResultSet $rs, $startcol = 1)
	{
		try {

			$this->uid = $rs->getInt($startcol + 0);

			$this->pid = $rs->getInt($startcol + 1);

			$this->tstamp = $rs->getInt($startcol + 2);

			$this->username = $rs->getString($startcol + 3);

			$this->password = $rs->getString($startcol + 4);

			$this->usergroup = $rs->getBlob($startcol + 5);

			$this->disable = $rs->getInt($startcol + 6);

			$this->starttime = $rs->getInt($startcol + 7);

			$this->endtime = $rs->getInt($startcol + 8);

			$this->name = $rs->getString($startcol + 9);

			$this->address = $rs->getString($startcol + 10);

			$this->telephone = $rs->getString($startcol + 11);

			$this->fax = $rs->getString($startcol + 12);

			$this->email = $rs->getString($startcol + 13);

			$this->crdate = $rs->getInt($startcol + 14);

			$this->cruser_id = $rs->getInt($startcol + 15);

			$this->locktodomain = $rs->getString($startcol + 16);

			$this->deleted = $rs->getInt($startcol + 17);

			$this->uc = $rs->getBlob($startcol + 18);

			$this->title = $rs->getString($startcol + 19);

			$this->zip = $rs->getString($startcol + 20);

			$this->city = $rs->getString($startcol + 21);

			$this->country = $rs->getString($startcol + 22);

			$this->www = $rs->getString($startcol + 23);

			$this->company = $rs->getString($startcol + 24);

			$this->image = $rs->getBlob($startcol + 25);

			$this->tsconfig = $rs->getBlob($startcol + 26);

			$this->fe_cruser_id = $rs->getInt($startcol + 27);

			$this->lastlogin = $rs->getInt($startcol + 28);

			$this->is_online = $rs->getInt($startcol + 29);

			$this->tx_mklvcommunity_icq = $rs->getString($startcol + 30);

			$this->tx_mklvcommunity_privacy_flag = $rs->getInt($startcol + 31);

			$this->tx_mklvcommunity_buddy_confirm = $rs->getInt($startcol + 32);

			$this->resetModified();

			$this->setNew(false);

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 33; // 33 = FeUsersPeer::NUM_COLUMNS - FeUsersPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating FeUsers object", $e);
		}
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      Connection $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FeUsersPeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			FeUsersPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.  If the object is new,
	 * it inserts it; otherwise an update is performed.  This method
	 * wraps the doSave() worker method in a transaction.
	 *
	 * @param      Connection $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FeUsersPeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			$affectedRows = $this->doSave($con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      Connection $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave($con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = FeUsersPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setUid($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += FeUsersPeer::doUpdate($this, $con);
				}
				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collTxMklvcommunityUnconfirmedBuddysRelatedByUserUid !== null) {
				foreach($this->collTxMklvcommunityUnconfirmedBuddysRelatedByUserUid as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid !== null) {
				foreach($this->collTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTxMklvcommunityBuddysRelatedByUserUid !== null) {
				foreach($this->collTxMklvcommunityBuddysRelatedByUserUid as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTxMklvcommunityBuddysRelatedByBuddyUid !== null) {
				foreach($this->collTxMklvcommunityBuddysRelatedByBuddyUid as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;
		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = FeUsersPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collTxMklvcommunityUnconfirmedBuddysRelatedByUserUid !== null) {
					foreach($this->collTxMklvcommunityUnconfirmedBuddysRelatedByUserUid as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid !== null) {
					foreach($this->collTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTxMklvcommunityBuddysRelatedByUserUid !== null) {
					foreach($this->collTxMklvcommunityBuddysRelatedByUserUid as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTxMklvcommunityBuddysRelatedByBuddyUid !== null) {
					foreach($this->collTxMklvcommunityBuddysRelatedByBuddyUid as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(FeUsersPeer::DATABASE_NAME);

		if ($this->isColumnModified(FeUsersPeer::UID)) $criteria->add(FeUsersPeer::UID, $this->uid);
		if ($this->isColumnModified(FeUsersPeer::PID)) $criteria->add(FeUsersPeer::PID, $this->pid);
		if ($this->isColumnModified(FeUsersPeer::TSTAMP)) $criteria->add(FeUsersPeer::TSTAMP, $this->tstamp);
		if ($this->isColumnModified(FeUsersPeer::USERNAME)) $criteria->add(FeUsersPeer::USERNAME, $this->username);
		if ($this->isColumnModified(FeUsersPeer::PASSWORD)) $criteria->add(FeUsersPeer::PASSWORD, $this->password);
		if ($this->isColumnModified(FeUsersPeer::USERGROUP)) $criteria->add(FeUsersPeer::USERGROUP, $this->usergroup);
		if ($this->isColumnModified(FeUsersPeer::DISABLE)) $criteria->add(FeUsersPeer::DISABLE, $this->disable);
		if ($this->isColumnModified(FeUsersPeer::STARTTIME)) $criteria->add(FeUsersPeer::STARTTIME, $this->starttime);
		if ($this->isColumnModified(FeUsersPeer::ENDTIME)) $criteria->add(FeUsersPeer::ENDTIME, $this->endtime);
		if ($this->isColumnModified(FeUsersPeer::NAME)) $criteria->add(FeUsersPeer::NAME, $this->name);
		if ($this->isColumnModified(FeUsersPeer::ADDRESS)) $criteria->add(FeUsersPeer::ADDRESS, $this->address);
		if ($this->isColumnModified(FeUsersPeer::TELEPHONE)) $criteria->add(FeUsersPeer::TELEPHONE, $this->telephone);
		if ($this->isColumnModified(FeUsersPeer::FAX)) $criteria->add(FeUsersPeer::FAX, $this->fax);
		if ($this->isColumnModified(FeUsersPeer::EMAIL)) $criteria->add(FeUsersPeer::EMAIL, $this->email);
		if ($this->isColumnModified(FeUsersPeer::CRDATE)) $criteria->add(FeUsersPeer::CRDATE, $this->crdate);
		if ($this->isColumnModified(FeUsersPeer::CRUSER_ID)) $criteria->add(FeUsersPeer::CRUSER_ID, $this->cruser_id);
		if ($this->isColumnModified(FeUsersPeer::LOCKTODOMAIN)) $criteria->add(FeUsersPeer::LOCKTODOMAIN, $this->locktodomain);
		if ($this->isColumnModified(FeUsersPeer::DELETED)) $criteria->add(FeUsersPeer::DELETED, $this->deleted);
		if ($this->isColumnModified(FeUsersPeer::UC)) $criteria->add(FeUsersPeer::UC, $this->uc);
		if ($this->isColumnModified(FeUsersPeer::TITLE)) $criteria->add(FeUsersPeer::TITLE, $this->title);
		if ($this->isColumnModified(FeUsersPeer::ZIP)) $criteria->add(FeUsersPeer::ZIP, $this->zip);
		if ($this->isColumnModified(FeUsersPeer::CITY)) $criteria->add(FeUsersPeer::CITY, $this->city);
		if ($this->isColumnModified(FeUsersPeer::COUNTRY)) $criteria->add(FeUsersPeer::COUNTRY, $this->country);
		if ($this->isColumnModified(FeUsersPeer::WWW)) $criteria->add(FeUsersPeer::WWW, $this->www);
		if ($this->isColumnModified(FeUsersPeer::COMPANY)) $criteria->add(FeUsersPeer::COMPANY, $this->company);
		if ($this->isColumnModified(FeUsersPeer::IMAGE)) $criteria->add(FeUsersPeer::IMAGE, $this->image);
		if ($this->isColumnModified(FeUsersPeer::TSCONFIG)) $criteria->add(FeUsersPeer::TSCONFIG, $this->tsconfig);
		if ($this->isColumnModified(FeUsersPeer::FE_CRUSER_ID)) $criteria->add(FeUsersPeer::FE_CRUSER_ID, $this->fe_cruser_id);
		if ($this->isColumnModified(FeUsersPeer::LASTLOGIN)) $criteria->add(FeUsersPeer::LASTLOGIN, $this->lastlogin);
		if ($this->isColumnModified(FeUsersPeer::IS_ONLINE)) $criteria->add(FeUsersPeer::IS_ONLINE, $this->is_online);
		if ($this->isColumnModified(FeUsersPeer::TX_MKLVCOMMUNITY_ICQ)) $criteria->add(FeUsersPeer::TX_MKLVCOMMUNITY_ICQ, $this->tx_mklvcommunity_icq);
		if ($this->isColumnModified(FeUsersPeer::TX_MKLVCOMMUNITY_PRIVACY_FLAG)) $criteria->add(FeUsersPeer::TX_MKLVCOMMUNITY_PRIVACY_FLAG, $this->tx_mklvcommunity_privacy_flag);
		if ($this->isColumnModified(FeUsersPeer::TX_MKLVCOMMUNITY_BUDDY_CONFIRM)) $criteria->add(FeUsersPeer::TX_MKLVCOMMUNITY_BUDDY_CONFIRM, $this->tx_mklvcommunity_buddy_confirm);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(FeUsersPeer::DATABASE_NAME);

		$criteria->add(FeUsersPeer::UID, $this->uid);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getUid();
	}

	/**
	 * Generic method to set the primary key (uid column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setUid($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of FeUsers (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setPid($this->pid);

		$copyObj->setTstamp($this->tstamp);

		$copyObj->setUsername($this->username);

		$copyObj->setPassword($this->password);

		$copyObj->setUsergroup($this->usergroup);

		$copyObj->setDisable($this->disable);

		$copyObj->setStarttime($this->starttime);

		$copyObj->setEndtime($this->endtime);

		$copyObj->setName($this->name);

		$copyObj->setAddress($this->address);

		$copyObj->setTelephone($this->telephone);

		$copyObj->setFax($this->fax);

		$copyObj->setEmail($this->email);

		$copyObj->setCrdate($this->crdate);

		$copyObj->setCruserId($this->cruser_id);

		$copyObj->setLocktodomain($this->locktodomain);

		$copyObj->setDeleted($this->deleted);

		$copyObj->setUc($this->uc);

		$copyObj->setTitle($this->title);

		$copyObj->setZip($this->zip);

		$copyObj->setCity($this->city);

		$copyObj->setCountry($this->country);

		$copyObj->setWww($this->www);

		$copyObj->setCompany($this->company);

		$copyObj->setImage($this->image);

		$copyObj->setTsconfig($this->tsconfig);

		$copyObj->setFeCruserId($this->fe_cruser_id);

		$copyObj->setLastlogin($this->lastlogin);

		$copyObj->setIsOnline($this->is_online);

		$copyObj->setTxMklvcommunityIcq($this->tx_mklvcommunity_icq);

		$copyObj->setTxMklvcommunityPrivacyFlag($this->tx_mklvcommunity_privacy_flag);

		$copyObj->setTxMklvcommunityBuddyConfirm($this->tx_mklvcommunity_buddy_confirm);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach($this->getTxMklvcommunityUnconfirmedBuddysRelatedByUserUid() as $relObj) {
				$copyObj->addTxMklvcommunityUnconfirmedBuddyRelatedByUserUid($relObj->copy($deepCopy));
			}

			foreach($this->getTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid() as $relObj) {
				$copyObj->addTxMklvcommunityUnconfirmedBuddyRelatedByBuddyUid($relObj->copy($deepCopy));
			}

			foreach($this->getTxMklvcommunityBuddysRelatedByUserUid() as $relObj) {
				$copyObj->addTxMklvcommunityBuddyRelatedByUserUid($relObj->copy($deepCopy));
			}

			foreach($this->getTxMklvcommunityBuddysRelatedByBuddyUid() as $relObj) {
				$copyObj->addTxMklvcommunityBuddyRelatedByBuddyUid($relObj->copy($deepCopy));
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setUid(NULL); // this is a pkey column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     FeUsers Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     FeUsersPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new FeUsersPeer();
		}
		return self::$peer;
	}

	/**
	 * Temporary storage of collTxMklvcommunityUnconfirmedBuddysRelatedByUserUid to save a possible db hit in
	 * the event objects are add to the collection, but the
	 * complete collection is never requested.
	 * @return     void
	 */
	public function initTxMklvcommunityUnconfirmedBuddysRelatedByUserUid()
	{
		if ($this->collTxMklvcommunityUnconfirmedBuddysRelatedByUserUid === null) {
			$this->collTxMklvcommunityUnconfirmedBuddysRelatedByUserUid = array();
		}
	}

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this FeUsers has previously
	 * been saved, it will retrieve related TxMklvcommunityUnconfirmedBuddysRelatedByUserUid from storage.
	 * If this FeUsers is new, it will return
	 * an empty collection or the current collection, the criteria
	 * is ignored on a new object.
	 *
	 * @param      Connection $con
	 * @param      Criteria $criteria
	 * @throws     PropelException
	 */
	public function getTxMklvcommunityUnconfirmedBuddysRelatedByUserUid($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'mklv_community/om/BaseTxMklvcommunityUnconfirmedBuddyPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTxMklvcommunityUnconfirmedBuddysRelatedByUserUid === null) {
			if ($this->isNew()) {
			   $this->collTxMklvcommunityUnconfirmedBuddysRelatedByUserUid = array();
			} else {

				$criteria->add(TxMklvcommunityUnconfirmedBuddyPeer::USER_UID, $this->getUid());

				TxMklvcommunityUnconfirmedBuddyPeer::addSelectColumns($criteria);
				$this->collTxMklvcommunityUnconfirmedBuddysRelatedByUserUid = TxMklvcommunityUnconfirmedBuddyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TxMklvcommunityUnconfirmedBuddyPeer::USER_UID, $this->getUid());

				TxMklvcommunityUnconfirmedBuddyPeer::addSelectColumns($criteria);
				if (!isset($this->lastTxMklvcommunityUnconfirmedBuddyRelatedByUserUidCriteria) || !$this->lastTxMklvcommunityUnconfirmedBuddyRelatedByUserUidCriteria->equals($criteria)) {
					$this->collTxMklvcommunityUnconfirmedBuddysRelatedByUserUid = TxMklvcommunityUnconfirmedBuddyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTxMklvcommunityUnconfirmedBuddyRelatedByUserUidCriteria = $criteria;
		return $this->collTxMklvcommunityUnconfirmedBuddysRelatedByUserUid;
	}

	/**
	 * Returns the number of related TxMklvcommunityUnconfirmedBuddysRelatedByUserUid.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      Connection $con
	 * @throws     PropelException
	 */
	public function countTxMklvcommunityUnconfirmedBuddysRelatedByUserUid($criteria = null, $distinct = false, $con = null)
	{
		// include the Peer class
		include_once 'mklv_community/om/BaseTxMklvcommunityUnconfirmedBuddyPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		$criteria->add(TxMklvcommunityUnconfirmedBuddyPeer::USER_UID, $this->getUid());

		return TxMklvcommunityUnconfirmedBuddyPeer::doCount($criteria, $distinct, $con);
	}

	/**
	 * Method called to associate a TxMklvcommunityUnconfirmedBuddy object to this object
	 * through the TxMklvcommunityUnconfirmedBuddy foreign key attribute
	 *
	 * @param      TxMklvcommunityUnconfirmedBuddy $l TxMklvcommunityUnconfirmedBuddy
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTxMklvcommunityUnconfirmedBuddyRelatedByUserUid(TxMklvcommunityUnconfirmedBuddy $l)
	{
		$this->collTxMklvcommunityUnconfirmedBuddysRelatedByUserUid[] = $l;
		$l->setFeUsersRelatedByUserUid($this);
	}

	/**
	 * Temporary storage of collTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid to save a possible db hit in
	 * the event objects are add to the collection, but the
	 * complete collection is never requested.
	 * @return     void
	 */
	public function initTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid()
	{
		if ($this->collTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid === null) {
			$this->collTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid = array();
		}
	}

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this FeUsers has previously
	 * been saved, it will retrieve related TxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid from storage.
	 * If this FeUsers is new, it will return
	 * an empty collection or the current collection, the criteria
	 * is ignored on a new object.
	 *
	 * @param      Connection $con
	 * @param      Criteria $criteria
	 * @throws     PropelException
	 */
	public function getTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'mklv_community/om/BaseTxMklvcommunityUnconfirmedBuddyPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid === null) {
			if ($this->isNew()) {
			   $this->collTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid = array();
			} else {

				$criteria->add(TxMklvcommunityUnconfirmedBuddyPeer::BUDDY_UID, $this->getUid());

				TxMklvcommunityUnconfirmedBuddyPeer::addSelectColumns($criteria);
				$this->collTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid = TxMklvcommunityUnconfirmedBuddyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TxMklvcommunityUnconfirmedBuddyPeer::BUDDY_UID, $this->getUid());

				TxMklvcommunityUnconfirmedBuddyPeer::addSelectColumns($criteria);
				if (!isset($this->lastTxMklvcommunityUnconfirmedBuddyRelatedByBuddyUidCriteria) || !$this->lastTxMklvcommunityUnconfirmedBuddyRelatedByBuddyUidCriteria->equals($criteria)) {
					$this->collTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid = TxMklvcommunityUnconfirmedBuddyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTxMklvcommunityUnconfirmedBuddyRelatedByBuddyUidCriteria = $criteria;
		return $this->collTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid;
	}

	/**
	 * Returns the number of related TxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      Connection $con
	 * @throws     PropelException
	 */
	public function countTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid($criteria = null, $distinct = false, $con = null)
	{
		// include the Peer class
		include_once 'mklv_community/om/BaseTxMklvcommunityUnconfirmedBuddyPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		$criteria->add(TxMklvcommunityUnconfirmedBuddyPeer::BUDDY_UID, $this->getUid());

		return TxMklvcommunityUnconfirmedBuddyPeer::doCount($criteria, $distinct, $con);
	}

	/**
	 * Method called to associate a TxMklvcommunityUnconfirmedBuddy object to this object
	 * through the TxMklvcommunityUnconfirmedBuddy foreign key attribute
	 *
	 * @param      TxMklvcommunityUnconfirmedBuddy $l TxMklvcommunityUnconfirmedBuddy
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTxMklvcommunityUnconfirmedBuddyRelatedByBuddyUid(TxMklvcommunityUnconfirmedBuddy $l)
	{
		$this->collTxMklvcommunityUnconfirmedBuddysRelatedByBuddyUid[] = $l;
		$l->setFeUsersRelatedByBuddyUid($this);
	}

	/**
	 * Temporary storage of collTxMklvcommunityBuddysRelatedByUserUid to save a possible db hit in
	 * the event objects are add to the collection, but the
	 * complete collection is never requested.
	 * @return     void
	 */
	public function initTxMklvcommunityBuddysRelatedByUserUid()
	{
		if ($this->collTxMklvcommunityBuddysRelatedByUserUid === null) {
			$this->collTxMklvcommunityBuddysRelatedByUserUid = array();
		}
	}

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this FeUsers has previously
	 * been saved, it will retrieve related TxMklvcommunityBuddysRelatedByUserUid from storage.
	 * If this FeUsers is new, it will return
	 * an empty collection or the current collection, the criteria
	 * is ignored on a new object.
	 *
	 * @param      Connection $con
	 * @param      Criteria $criteria
	 * @throws     PropelException
	 */
	public function getTxMklvcommunityBuddysRelatedByUserUid($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'mklv_community/om/BaseTxMklvcommunityBuddyPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTxMklvcommunityBuddysRelatedByUserUid === null) {
			if ($this->isNew()) {
			   $this->collTxMklvcommunityBuddysRelatedByUserUid = array();
			} else {

				$criteria->add(TxMklvcommunityBuddyPeer::USER_UID, $this->getUid());

				TxMklvcommunityBuddyPeer::addSelectColumns($criteria);
				$this->collTxMklvcommunityBuddysRelatedByUserUid = TxMklvcommunityBuddyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TxMklvcommunityBuddyPeer::USER_UID, $this->getUid());

				TxMklvcommunityBuddyPeer::addSelectColumns($criteria);
				if (!isset($this->lastTxMklvcommunityBuddyRelatedByUserUidCriteria) || !$this->lastTxMklvcommunityBuddyRelatedByUserUidCriteria->equals($criteria)) {
					$this->collTxMklvcommunityBuddysRelatedByUserUid = TxMklvcommunityBuddyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTxMklvcommunityBuddyRelatedByUserUidCriteria = $criteria;
		return $this->collTxMklvcommunityBuddysRelatedByUserUid;
	}

	/**
	 * Returns the number of related TxMklvcommunityBuddysRelatedByUserUid.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      Connection $con
	 * @throws     PropelException
	 */
	public function countTxMklvcommunityBuddysRelatedByUserUid($criteria = null, $distinct = false, $con = null)
	{
		// include the Peer class
		include_once 'mklv_community/om/BaseTxMklvcommunityBuddyPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		$criteria->add(TxMklvcommunityBuddyPeer::USER_UID, $this->getUid());

		return TxMklvcommunityBuddyPeer::doCount($criteria, $distinct, $con);
	}

	/**
	 * Method called to associate a TxMklvcommunityBuddy object to this object
	 * through the TxMklvcommunityBuddy foreign key attribute
	 *
	 * @param      TxMklvcommunityBuddy $l TxMklvcommunityBuddy
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTxMklvcommunityBuddyRelatedByUserUid(TxMklvcommunityBuddy $l)
	{
		$this->collTxMklvcommunityBuddysRelatedByUserUid[] = $l;
		$l->setFeUsersRelatedByUserUid($this);
	}

	/**
	 * Temporary storage of collTxMklvcommunityBuddysRelatedByBuddyUid to save a possible db hit in
	 * the event objects are add to the collection, but the
	 * complete collection is never requested.
	 * @return     void
	 */
	public function initTxMklvcommunityBuddysRelatedByBuddyUid()
	{
		if ($this->collTxMklvcommunityBuddysRelatedByBuddyUid === null) {
			$this->collTxMklvcommunityBuddysRelatedByBuddyUid = array();
		}
	}

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this FeUsers has previously
	 * been saved, it will retrieve related TxMklvcommunityBuddysRelatedByBuddyUid from storage.
	 * If this FeUsers is new, it will return
	 * an empty collection or the current collection, the criteria
	 * is ignored on a new object.
	 *
	 * @param      Connection $con
	 * @param      Criteria $criteria
	 * @throws     PropelException
	 */
	public function getTxMklvcommunityBuddysRelatedByBuddyUid($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'mklv_community/om/BaseTxMklvcommunityBuddyPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTxMklvcommunityBuddysRelatedByBuddyUid === null) {
			if ($this->isNew()) {
			   $this->collTxMklvcommunityBuddysRelatedByBuddyUid = array();
			} else {

				$criteria->add(TxMklvcommunityBuddyPeer::BUDDY_UID, $this->getUid());

				TxMklvcommunityBuddyPeer::addSelectColumns($criteria);
				$this->collTxMklvcommunityBuddysRelatedByBuddyUid = TxMklvcommunityBuddyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TxMklvcommunityBuddyPeer::BUDDY_UID, $this->getUid());

				TxMklvcommunityBuddyPeer::addSelectColumns($criteria);
				if (!isset($this->lastTxMklvcommunityBuddyRelatedByBuddyUidCriteria) || !$this->lastTxMklvcommunityBuddyRelatedByBuddyUidCriteria->equals($criteria)) {
					$this->collTxMklvcommunityBuddysRelatedByBuddyUid = TxMklvcommunityBuddyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTxMklvcommunityBuddyRelatedByBuddyUidCriteria = $criteria;
		return $this->collTxMklvcommunityBuddysRelatedByBuddyUid;
	}

	/**
	 * Returns the number of related TxMklvcommunityBuddysRelatedByBuddyUid.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      Connection $con
	 * @throws     PropelException
	 */
	public function countTxMklvcommunityBuddysRelatedByBuddyUid($criteria = null, $distinct = false, $con = null)
	{
		// include the Peer class
		include_once 'mklv_community/om/BaseTxMklvcommunityBuddyPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		$criteria->add(TxMklvcommunityBuddyPeer::BUDDY_UID, $this->getUid());

		return TxMklvcommunityBuddyPeer::doCount($criteria, $distinct, $con);
	}

	/**
	 * Method called to associate a TxMklvcommunityBuddy object to this object
	 * through the TxMklvcommunityBuddy foreign key attribute
	 *
	 * @param      TxMklvcommunityBuddy $l TxMklvcommunityBuddy
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTxMklvcommunityBuddyRelatedByBuddyUid(TxMklvcommunityBuddy $l)
	{
		$this->collTxMklvcommunityBuddysRelatedByBuddyUid[] = $l;
		$l->setFeUsersRelatedByBuddyUid($this);
	}

} // BaseFeUsers
