<?php

require_once 'propel/om/BaseObject.php';

require_once 'propel/om/Persistent.php';

include_once 'creole/util/Clob.php';
include_once 'creole/util/Blob.php';


include_once 'propel/util/Criteria.php';

include_once 'mklv_community/FeGroupsPeer.php';

/**
 * Base class that represents a row from the 'fe_groups' table.
 *
 * 
 *
 * This class was autogenerated by Propel on:
 *
 * Sun Dec  2 12:29:19 2007
 *
 * @package    mklv_community.om
 */
abstract class BaseFeGroups extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        FeGroupsPeer
	 */
	protected static $peer;


	/**
	 * The value for the uid field.
	 * @var        int
	 */
	protected $uid;


	/**
	 * The value for the pid field.
	 * @var        int
	 */
	protected $pid;


	/**
	 * The value for the tstamp field.
	 * @var        int
	 */
	protected $tstamp;


	/**
	 * The value for the title field.
	 * @var        string
	 */
	protected $title;


	/**
	 * The value for the hidden field.
	 * @var        int
	 */
	protected $hidden;


	/**
	 * The value for the locktodomain field.
	 * @var        string
	 */
	protected $locktodomain;


	/**
	 * The value for the deleted field.
	 * @var        int
	 */
	protected $deleted;


	/**
	 * The value for the description field.
	 * @var        string
	 */
	protected $description;


	/**
	 * The value for the subgroup field.
	 * @var        string
	 */
	protected $subgroup;


	/**
	 * The value for the tsconfig field.
	 * @var        string
	 */
	protected $tsconfig;


	/**
	 * The value for the tx_mklvcommunity_icon field.
	 * @var        string
	 */
	protected $tx_mklvcommunity_icon;


	/**
	 * The value for the tx_mklvcommunity_visibility field.
	 * @var        int
	 */
	protected $tx_mklvcommunity_visibility;


	/**
	 * The value for the tx_mklvcommunity_invitation field.
	 * @var        int
	 */
	protected $tx_mklvcommunity_invitation;


	/**
	 * The value for the tx_mklvcommunity_url field.
	 * @var        string
	 */
	protected $tx_mklvcommunity_url;


	/**
	 * The value for the tx_mklvcommunity_owner field.
	 * @var        string
	 */
	protected $tx_mklvcommunity_owner;


	/**
	 * The value for the tx_mklvcommunity_admins field.
	 * @var        int
	 */
	protected $tx_mklvcommunity_admins;


	/**
	 * The value for the tx_mklvcommunity_tags field.
	 * @var        string
	 */
	protected $tx_mklvcommunity_tags;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [uid] column value.
	 * 
	 * @return     int
	 */
	public function getUid()
	{

		return $this->uid;
	}

	/**
	 * Get the [pid] column value.
	 * 
	 * @return     int
	 */
	public function getPid()
	{

		return $this->pid;
	}

	/**
	 * Get the [tstamp] column value.
	 * 
	 * @return     int
	 */
	public function getTstamp()
	{

		return $this->tstamp;
	}

	/**
	 * Get the [title] column value.
	 * 
	 * @return     string
	 */
	public function getTitle()
	{

		return $this->title;
	}

	/**
	 * Get the [hidden] column value.
	 * 
	 * @return     int
	 */
	public function getHidden()
	{

		return $this->hidden;
	}

	/**
	 * Get the [locktodomain] column value.
	 * 
	 * @return     string
	 */
	public function getLocktodomain()
	{

		return $this->locktodomain;
	}

	/**
	 * Get the [deleted] column value.
	 * 
	 * @return     int
	 */
	public function getDeleted()
	{

		return $this->deleted;
	}

	/**
	 * Get the [description] column value.
	 * 
	 * @return     string
	 */
	public function getDescription()
	{

		return $this->description;
	}

	/**
	 * Get the [subgroup] column value.
	 * 
	 * @return     string
	 */
	public function getSubgroup()
	{

		return $this->subgroup;
	}

	/**
	 * Get the [tsconfig] column value.
	 * 
	 * @return     string
	 */
	public function getTsconfig()
	{

		return $this->tsconfig;
	}

	/**
	 * Get the [tx_mklvcommunity_icon] column value.
	 * 
	 * @return     string
	 */
	public function getTxMklvcommunityIcon()
	{

		return $this->tx_mklvcommunity_icon;
	}

	/**
	 * Get the [tx_mklvcommunity_visibility] column value.
	 * 
	 * @return     int
	 */
	public function getTxMklvcommunityVisibility()
	{

		return $this->tx_mklvcommunity_visibility;
	}

	/**
	 * Get the [tx_mklvcommunity_invitation] column value.
	 * 
	 * @return     int
	 */
	public function getTxMklvcommunityInvitation()
	{

		return $this->tx_mklvcommunity_invitation;
	}

	/**
	 * Get the [tx_mklvcommunity_url] column value.
	 * 
	 * @return     string
	 */
	public function getTxMklvcommunityUrl()
	{

		return $this->tx_mklvcommunity_url;
	}

	/**
	 * Get the [tx_mklvcommunity_owner] column value.
	 * 
	 * @return     string
	 */
	public function getTxMklvcommunityOwner()
	{

		return $this->tx_mklvcommunity_owner;
	}

	/**
	 * Get the [tx_mklvcommunity_admins] column value.
	 * 
	 * @return     int
	 */
	public function getTxMklvcommunityAdmins()
	{

		return $this->tx_mklvcommunity_admins;
	}

	/**
	 * Get the [tx_mklvcommunity_tags] column value.
	 * 
	 * @return     string
	 */
	public function getTxMklvcommunityTags()
	{

		return $this->tx_mklvcommunity_tags;
	}

	/**
	 * Set the value of [uid] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setUid($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->uid !== $v) {
			$this->uid = $v;
			$this->modifiedColumns[] = FeGroupsPeer::UID;
		}

	} // setUid()

	/**
	 * Set the value of [pid] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setPid($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->pid !== $v) {
			$this->pid = $v;
			$this->modifiedColumns[] = FeGroupsPeer::PID;
		}

	} // setPid()

	/**
	 * Set the value of [tstamp] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setTstamp($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->tstamp !== $v) {
			$this->tstamp = $v;
			$this->modifiedColumns[] = FeGroupsPeer::TSTAMP;
		}

	} // setTstamp()

	/**
	 * Set the value of [title] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setTitle($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->title !== $v) {
			$this->title = $v;
			$this->modifiedColumns[] = FeGroupsPeer::TITLE;
		}

	} // setTitle()

	/**
	 * Set the value of [hidden] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setHidden($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->hidden !== $v) {
			$this->hidden = $v;
			$this->modifiedColumns[] = FeGroupsPeer::HIDDEN;
		}

	} // setHidden()

	/**
	 * Set the value of [locktodomain] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setLocktodomain($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->locktodomain !== $v) {
			$this->locktodomain = $v;
			$this->modifiedColumns[] = FeGroupsPeer::LOCKTODOMAIN;
		}

	} // setLocktodomain()

	/**
	 * Set the value of [deleted] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setDeleted($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->deleted !== $v) {
			$this->deleted = $v;
			$this->modifiedColumns[] = FeGroupsPeer::DELETED;
		}

	} // setDeleted()

	/**
	 * Set the value of [description] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setDescription($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->description !== $v) {
			$this->description = $v;
			$this->modifiedColumns[] = FeGroupsPeer::DESCRIPTION;
		}

	} // setDescription()

	/**
	 * Set the value of [subgroup] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setSubgroup($v)
	{

		// if the passed in parameter is the *same* object that
		// is stored internally then we use the Lob->isModified()
		// method to know whether contents changed.
		if ($v instanceof Lob && $v === $this->subgroup) {
			$changed = $v->isModified();
		} else {
			$changed = ($this->subgroup !== $v);
		}
		if ($changed) {
			if ( !($v instanceof Lob) ) {
				$obj = new Blob();
				$obj->setContents($v);
			} else {
				$obj = $v;
			}
			$this->subgroup = $obj;
			$this->modifiedColumns[] = FeGroupsPeer::SUBGROUP;
		}

	} // setSubgroup()

	/**
	 * Set the value of [tsconfig] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setTsconfig($v)
	{

		// if the passed in parameter is the *same* object that
		// is stored internally then we use the Lob->isModified()
		// method to know whether contents changed.
		if ($v instanceof Lob && $v === $this->tsconfig) {
			$changed = $v->isModified();
		} else {
			$changed = ($this->tsconfig !== $v);
		}
		if ($changed) {
			if ( !($v instanceof Lob) ) {
				$obj = new Blob();
				$obj->setContents($v);
			} else {
				$obj = $v;
			}
			$this->tsconfig = $obj;
			$this->modifiedColumns[] = FeGroupsPeer::TSCONFIG;
		}

	} // setTsconfig()

	/**
	 * Set the value of [tx_mklvcommunity_icon] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setTxMklvcommunityIcon($v)
	{

		// if the passed in parameter is the *same* object that
		// is stored internally then we use the Lob->isModified()
		// method to know whether contents changed.
		if ($v instanceof Lob && $v === $this->tx_mklvcommunity_icon) {
			$changed = $v->isModified();
		} else {
			$changed = ($this->tx_mklvcommunity_icon !== $v);
		}
		if ($changed) {
			if ( !($v instanceof Lob) ) {
				$obj = new Blob();
				$obj->setContents($v);
			} else {
				$obj = $v;
			}
			$this->tx_mklvcommunity_icon = $obj;
			$this->modifiedColumns[] = FeGroupsPeer::TX_MKLVCOMMUNITY_ICON;
		}

	} // setTxMklvcommunityIcon()

	/**
	 * Set the value of [tx_mklvcommunity_visibility] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setTxMklvcommunityVisibility($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->tx_mklvcommunity_visibility !== $v) {
			$this->tx_mklvcommunity_visibility = $v;
			$this->modifiedColumns[] = FeGroupsPeer::TX_MKLVCOMMUNITY_VISIBILITY;
		}

	} // setTxMklvcommunityVisibility()

	/**
	 * Set the value of [tx_mklvcommunity_invitation] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setTxMklvcommunityInvitation($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->tx_mklvcommunity_invitation !== $v) {
			$this->tx_mklvcommunity_invitation = $v;
			$this->modifiedColumns[] = FeGroupsPeer::TX_MKLVCOMMUNITY_INVITATION;
		}

	} // setTxMklvcommunityInvitation()

	/**
	 * Set the value of [tx_mklvcommunity_url] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setTxMklvcommunityUrl($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->tx_mklvcommunity_url !== $v) {
			$this->tx_mklvcommunity_url = $v;
			$this->modifiedColumns[] = FeGroupsPeer::TX_MKLVCOMMUNITY_URL;
		}

	} // setTxMklvcommunityUrl()

	/**
	 * Set the value of [tx_mklvcommunity_owner] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setTxMklvcommunityOwner($v)
	{

		// if the passed in parameter is the *same* object that
		// is stored internally then we use the Lob->isModified()
		// method to know whether contents changed.
		if ($v instanceof Lob && $v === $this->tx_mklvcommunity_owner) {
			$changed = $v->isModified();
		} else {
			$changed = ($this->tx_mklvcommunity_owner !== $v);
		}
		if ($changed) {
			if ( !($v instanceof Lob) ) {
				$obj = new Blob();
				$obj->setContents($v);
			} else {
				$obj = $v;
			}
			$this->tx_mklvcommunity_owner = $obj;
			$this->modifiedColumns[] = FeGroupsPeer::TX_MKLVCOMMUNITY_OWNER;
		}

	} // setTxMklvcommunityOwner()

	/**
	 * Set the value of [tx_mklvcommunity_admins] column.
	 * 
	 * @param      int $v new value
	 * @return     void
	 */
	public function setTxMklvcommunityAdmins($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->tx_mklvcommunity_admins !== $v) {
			$this->tx_mklvcommunity_admins = $v;
			$this->modifiedColumns[] = FeGroupsPeer::TX_MKLVCOMMUNITY_ADMINS;
		}

	} // setTxMklvcommunityAdmins()

	/**
	 * Set the value of [tx_mklvcommunity_tags] column.
	 * 
	 * @param      string $v new value
	 * @return     void
	 */
	public function setTxMklvcommunityTags($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->tx_mklvcommunity_tags !== $v) {
			$this->tx_mklvcommunity_tags = $v;
			$this->modifiedColumns[] = FeGroupsPeer::TX_MKLVCOMMUNITY_TAGS;
		}

	} // setTxMklvcommunityTags()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (1-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      ResultSet $rs The ResultSet class with cursor advanced to desired record pos.
	 * @param      int $startcol 1-based offset column which indicates which restultset column to start with.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate(ResultSet $rs, $startcol = 1)
	{
		try {

			$this->uid = $rs->getInt($startcol + 0);

			$this->pid = $rs->getInt($startcol + 1);

			$this->tstamp = $rs->getInt($startcol + 2);

			$this->title = $rs->getString($startcol + 3);

			$this->hidden = $rs->getInt($startcol + 4);

			$this->locktodomain = $rs->getString($startcol + 5);

			$this->deleted = $rs->getInt($startcol + 6);

			$this->description = $rs->getString($startcol + 7);

			$this->subgroup = $rs->getBlob($startcol + 8);

			$this->tsconfig = $rs->getBlob($startcol + 9);

			$this->tx_mklvcommunity_icon = $rs->getBlob($startcol + 10);

			$this->tx_mklvcommunity_visibility = $rs->getInt($startcol + 11);

			$this->tx_mklvcommunity_invitation = $rs->getInt($startcol + 12);

			$this->tx_mklvcommunity_url = $rs->getString($startcol + 13);

			$this->tx_mklvcommunity_owner = $rs->getBlob($startcol + 14);

			$this->tx_mklvcommunity_admins = $rs->getInt($startcol + 15);

			$this->tx_mklvcommunity_tags = $rs->getString($startcol + 16);

			$this->resetModified();

			$this->setNew(false);

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 17; // 17 = FeGroupsPeer::NUM_COLUMNS - FeGroupsPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating FeGroups object", $e);
		}
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      Connection $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FeGroupsPeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			FeGroupsPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.  If the object is new,
	 * it inserts it; otherwise an update is performed.  This method
	 * wraps the doSave() worker method in a transaction.
	 *
	 * @param      Connection $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FeGroupsPeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			$affectedRows = $this->doSave($con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      Connection $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave($con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = FeGroupsPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setUid($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += FeGroupsPeer::doUpdate($this, $con);
				}
				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;
		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = FeGroupsPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(FeGroupsPeer::DATABASE_NAME);

		if ($this->isColumnModified(FeGroupsPeer::UID)) $criteria->add(FeGroupsPeer::UID, $this->uid);
		if ($this->isColumnModified(FeGroupsPeer::PID)) $criteria->add(FeGroupsPeer::PID, $this->pid);
		if ($this->isColumnModified(FeGroupsPeer::TSTAMP)) $criteria->add(FeGroupsPeer::TSTAMP, $this->tstamp);
		if ($this->isColumnModified(FeGroupsPeer::TITLE)) $criteria->add(FeGroupsPeer::TITLE, $this->title);
		if ($this->isColumnModified(FeGroupsPeer::HIDDEN)) $criteria->add(FeGroupsPeer::HIDDEN, $this->hidden);
		if ($this->isColumnModified(FeGroupsPeer::LOCKTODOMAIN)) $criteria->add(FeGroupsPeer::LOCKTODOMAIN, $this->locktodomain);
		if ($this->isColumnModified(FeGroupsPeer::DELETED)) $criteria->add(FeGroupsPeer::DELETED, $this->deleted);
		if ($this->isColumnModified(FeGroupsPeer::DESCRIPTION)) $criteria->add(FeGroupsPeer::DESCRIPTION, $this->description);
		if ($this->isColumnModified(FeGroupsPeer::SUBGROUP)) $criteria->add(FeGroupsPeer::SUBGROUP, $this->subgroup);
		if ($this->isColumnModified(FeGroupsPeer::TSCONFIG)) $criteria->add(FeGroupsPeer::TSCONFIG, $this->tsconfig);
		if ($this->isColumnModified(FeGroupsPeer::TX_MKLVCOMMUNITY_ICON)) $criteria->add(FeGroupsPeer::TX_MKLVCOMMUNITY_ICON, $this->tx_mklvcommunity_icon);
		if ($this->isColumnModified(FeGroupsPeer::TX_MKLVCOMMUNITY_VISIBILITY)) $criteria->add(FeGroupsPeer::TX_MKLVCOMMUNITY_VISIBILITY, $this->tx_mklvcommunity_visibility);
		if ($this->isColumnModified(FeGroupsPeer::TX_MKLVCOMMUNITY_INVITATION)) $criteria->add(FeGroupsPeer::TX_MKLVCOMMUNITY_INVITATION, $this->tx_mklvcommunity_invitation);
		if ($this->isColumnModified(FeGroupsPeer::TX_MKLVCOMMUNITY_URL)) $criteria->add(FeGroupsPeer::TX_MKLVCOMMUNITY_URL, $this->tx_mklvcommunity_url);
		if ($this->isColumnModified(FeGroupsPeer::TX_MKLVCOMMUNITY_OWNER)) $criteria->add(FeGroupsPeer::TX_MKLVCOMMUNITY_OWNER, $this->tx_mklvcommunity_owner);
		if ($this->isColumnModified(FeGroupsPeer::TX_MKLVCOMMUNITY_ADMINS)) $criteria->add(FeGroupsPeer::TX_MKLVCOMMUNITY_ADMINS, $this->tx_mklvcommunity_admins);
		if ($this->isColumnModified(FeGroupsPeer::TX_MKLVCOMMUNITY_TAGS)) $criteria->add(FeGroupsPeer::TX_MKLVCOMMUNITY_TAGS, $this->tx_mklvcommunity_tags);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(FeGroupsPeer::DATABASE_NAME);

		$criteria->add(FeGroupsPeer::UID, $this->uid);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getUid();
	}

	/**
	 * Generic method to set the primary key (uid column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setUid($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of FeGroups (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setPid($this->pid);

		$copyObj->setTstamp($this->tstamp);

		$copyObj->setTitle($this->title);

		$copyObj->setHidden($this->hidden);

		$copyObj->setLocktodomain($this->locktodomain);

		$copyObj->setDeleted($this->deleted);

		$copyObj->setDescription($this->description);

		$copyObj->setSubgroup($this->subgroup);

		$copyObj->setTsconfig($this->tsconfig);

		$copyObj->setTxMklvcommunityIcon($this->tx_mklvcommunity_icon);

		$copyObj->setTxMklvcommunityVisibility($this->tx_mklvcommunity_visibility);

		$copyObj->setTxMklvcommunityInvitation($this->tx_mklvcommunity_invitation);

		$copyObj->setTxMklvcommunityUrl($this->tx_mklvcommunity_url);

		$copyObj->setTxMklvcommunityOwner($this->tx_mklvcommunity_owner);

		$copyObj->setTxMklvcommunityAdmins($this->tx_mklvcommunity_admins);

		$copyObj->setTxMklvcommunityTags($this->tx_mklvcommunity_tags);


		$copyObj->setNew(true);

		$copyObj->setUid(NULL); // this is a pkey column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     FeGroups Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     FeGroupsPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new FeGroupsPeer();
		}
		return self::$peer;
	}

} // BaseFeGroups
